#include <iostream>
#include <cstring>
#include <vector>
#include <iterator>
#include "Node.h"
#include "List.h"

//Shunting Yard Program
//Written by Gregory F.
//With extensive help from friends
//and https://en.wikipedia.org/wiki/Shunting-yard_algorithm

using namespace std;

vector<char*>* split(char*);
List* shuntingYard(vector<char*>*);
bool checkDigit(char*);
int getPrec(char*);
Node* makeTree(List*, List*);
void prefix(Node*);
void m_postfix(Node*);
void infix(Node*);
int main(){
  bool run = true;
  while(run){
    cout<<"Welcome to Shunting Yard, a program that takes in an expression and converts it into prefix, postfix and infix notations!"<< endl;
    cout<<"Please input your expression with a space between each character below"<<endl;
    cout<<"-----------------------"<<endl;
    char* input = new char();
    cin.getline(input, 80);
    vector<char*>* in = split(input);
    //Uses the split function to split the input by spaces
    List* postfix = shuntingYard(in);
    //Generates the postfix notation of the inputted expression by using the postfix function below
    List* stack = new List();
    Node* tree = makeTree(postfix, stack);
    //Creates the expression tree using the tree function
    while(true){
      cout<<"Input POSTFIX if you want the postfix expression, PREFIX if you want the prefix expression, INFIX if you want the expression, and QUIT to quit."<<endl;
      cout<<"------------------------"<<endl;
      char* ex= new char();
      cin.getline(ex, sizeof(ex));
      for(int i = 0; i<sizeof(ex); i++){
	ex[i] = toupper(ex[i]); //Changes all inputted commands to uppercase to get rid of uppercase-lowercase discrepancies between the commands and the input
      }
      cout<<"------------------------"<<endl;
      //Goes through the created tree to print the prefix, postfix and infix expressions
      if(strcmp(ex, "PREFIX") == 0){
	prefix(tree);
	cout<<endl;
      }
      else if(strcmp(ex, "POSTFIX") == 0){
	m_postfix(tree);
	cout<<endl;
      }
      else if(strcmp(ex, "INFIX") == 0){
	infix(tree);
	cout<<endl;
      }
      //break out of the code
      else if(strcmp(ex, "QUIT") == 0){
	run = false;
	break;
      }
      else{
	cout<<"Commands: PREFIX, POSTFIX, INFIX, QUIT"<<endl;
      }
    }
  }
  return 0;
}

//Generates output
vector <char*>* split (char* in){
  vector<char*>* out = new vector<char*>;
  int count = 0;
  char* temp = new char[strlen(in)]();
  for(int i = 0; i<strlen(in); i++){
    //if you find a space, push everything into current vector
    if(in[i] == ' '){
      out->push_back(temp);
      count = 0;
      temp = new char[strlen(in)]();
    }
    else{
      temp[count] = in[i];
      count++;
    }
    if(i == strlen(in)-1){
      out->push_back(temp);
    }
  }
  return out;
}

List* shuntingYard(vector<char*>* in){
  //Pseudocode from https://en.wikipedia.org/wiki/Shunting-yard_algorithm
  List* out_queue = new List();
  List* op_stack = new List();
  vector<char*>::iterator i;
  //iterate through the input
  for(i = in->begin(); i !=in->end();i++){
    char* val = (*i);
    //if val is a digit, push it to the output queue
    if(checkDigit(val)){
      out_queue->push(val);
    }
    //if it is a left bracket, push it to the operator stack
    else if(strcmp(val, "(") == 0){
      op_stack->push(val);
    }
    //if it is a right bracket, push everthing in the operator stack into the output queue until the left bracket is found
    else if(strcmp(val, ")") == 0){
      while(strcmp(op_stack->s_peek(), "(") != 0){
	out_queue->push(op_stack->s_pop());
      }
      op_stack->s_pop();
    }
    //if it is a operator
    else{
      int c_prec = getPrec(val);
      char* next = op_stack->s_peek();
      while(next && (getPrec(next)>c_prec || (getPrec(next) == c_prec && strcmp(next, "^") != 0)) && strcmp(next, "(") != 0){
	out_queue->push(op_stack->s_pop());
	next = op_stack->s_peek();
      }
      op_stack->push(val);
    }
  }
  //push the rest of the values in the operator stack into the output queue
  while(op_stack->s_peek() != NULL){
    out_queue->push(op_stack->s_pop());
  }
  return out_queue;
}

bool checkDigit(char* in){
  //function that checks if its a digit
  for(int i = 0; i<strlen(in);i++){
    if(!isdigit(in[i])){
	return false;
    }
  }
  return true;
}

int getPrec(char* in){
  //Function that returns the precedence of an operator
  if(strcmp(in, "+") == 0 || strcmp(in, "-") == 0){
    return 1;
  }
  else if(strcmp(in, "*") == 0 || strcmp(in, "/") == 0){
    return 2;
  }
  else if(strcmp(in, "^") == 0){
    return 3;
  }
  return -1;
}
Node* makeTree(List* postfix, List* stack){
  //gets the first postfix value
  char* val = postfix->q_pop();
  if(val != NULL){
    Node* temp = new Node(val);
    //if it is a digit, push it into the stack
    if(checkDigit(val)){
      stack->pushNode(temp);
    }
    //if it is an operator
    else{
      temp->setRight(stack->peek_node());
      stack->s_pop();
      temp->setLeft(stack->peek_node());
      stack->s_pop();
      stack->pushNode(temp);
    }
  }
  //if value is null, return it
  else{
    return stack->peek_node();
  }
  makeTree(postfix, stack);
}

void prefix(Node* tree){
  //traverse the tree to print prefix
  if(tree != NULL){
    cout<<tree->getVal();
    prefix(tree->getLeft());
    prefix(tree->getRight());
  }
}

void m_postfix(Node* tree){
  //traverse the tree to print postfix
  if(tree != NULL){
    m_postfix(tree->getLeft());
    m_postfix(tree->getRight());
    cout<<tree->getVal();
  }
}

void infix(Node* tree){
  //traverse the tree to print infix
  if(tree != NULL){
    if(!checkDigit(tree->getVal())){
      cout<<"(";
    }
    infix(tree->getLeft());
    cout<<tree->getVal();
    infix(tree->getRight());
    if(!checkDigit(tree->getVal())){
      cout<<")";
    }
  }
}
